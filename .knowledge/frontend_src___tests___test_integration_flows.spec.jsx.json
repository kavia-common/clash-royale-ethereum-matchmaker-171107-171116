{"is_source_file": true, "format": "JavaScript/JSX", "description": "This file contains high-level integration tests for a React application, focusing on user flows such as profile listing, wager filtering, and wallet connection. It uses testing-library/react and jest to mock network requests and Ethereum provider interactions.", "external_files": ["../App"], "external_methods": ["jest.setTimeout", "jest.fn", "jest.resetAllMocks", "Object.defineProperty", "afterEach", "render", "screen", "waitFor", "within", "act", "userEvent"], "published": [], "classes": [], "methods": [{"name": "mockFetchProfilesOnce({ profiles, status = 200 })", "description": "Mocks fetch API calls to endpoints related to profiles, returning predefined profile data for testing.", "scope": "", "scopeKind": ""}, {"name": "installEthereumMock({ accounts = [ethers.utils.getAddress('0x1234567890abcdef1234567890abcdef12345678')], chainId = '0x1' } = {})", "description": "Creates a mock Ethereum provider injected into the window object, supporting requests for accounts and chain ID, and event listeners.", "scope": "", "scopeKind": ""}, {"name": "__emit(event, ...args)", "scope": "installEthereumMock.ethMock", "scopeKind": "class", "description": "unavailable"}], "calls": ["jest.setTimeout", "jest.fn", "render", "screen.getByLabelText", "within(grid).getAllByRole", "within(cards[0]).getByText", "within(cards[1]).getByText", "waitFor", "userEvent.click", "ethers.utils.getAddress", "installEthereumMock", "expect", "screen.findByRole", "screen.findByTestId", "screen.getByText", "screen.findByRole", "jest.resetAllMocks"], "search-terms": ["test_integration_flows.spec.jsx", "Ethereum Wallet Mock", "Profile Listing Test", "Wallet Connection", "Mock Fetch Profiles", "React Testing Library", "Ethereum Provider Mock", "Wallet Connect Flow", "Profile Cards", "Wager Filtering"], "state": 2, "file_id": 13, "knowledge_revision": 124, "git_revision": "7b55d4e444629094c1f0fc064dacf500ca7d6de0", "revision_history": [{"28": ""}, {"73": "c7f8ead161da6db7ecc89b2155f91844c0571569"}, {"74": "5a7ff2a5f327ec399646a4f506e23d532cb4f6ad"}, {"75": "5a7ff2a5f327ec399646a4f506e23d532cb4f6ad"}, {"76": "5a7ff2a5f327ec399646a4f506e23d532cb4f6ad"}, {"77": "8571ca82cc8013a4f1870c11525c1f8a2773d9a2"}, {"78": "11b17ffbceddf459723483da8da824f6215d3bad"}, {"79": "617f2d0a25b737115be3a1b1dbff634b3367cdbf"}, {"83": "0176940c17fd1618e08828f4fff36585d8dbf198"}, {"100": "3f0a55dbb70daebf5c2721ba4eebc6a042757bca"}, {"103": "f51b57d3ce99fb9a7f652d998d9fa6cfe493f03c"}, {"111": "d76b6a12a75c47eaf3838678663f6f1469993cb3"}, {"113": "477809ae545ffc5fb339d487363a93979792f846"}, {"116": "9d35222b89cd95391aa8664ebdfbd301e6c09f2b"}, {"118": "1984ab2d185326cba8040e1fda8ed9bf9e06d9df"}, {"119": "2fd4a5bc78bdc443abefa665f8db8de5e9089631"}, {"120": "2fd4a5bc78bdc443abefa665f8db8de5e9089631"}, {"121": "2bb4cc74a56f519963d7c2d5658b11b3a0532a0c"}, {"122": "2bb4cc74a56f519963d7c2d5658b11b3a0532a0c"}, {"123": "7b55d4e444629094c1f0fc064dacf500ca7d6de0"}, {"124": "7b55d4e444629094c1f0fc064dacf500ca7d6de0"}], "ctags": [{"_type": "tag", "name": "__emit", "path": "/home/kavia/workspace/code-generation/clash-royale-ethereum-matchmaker-171107-171116/frontend/src/__tests__/test_integration_flows.spec.jsx", "pattern": "/^    __emit(event, ...args) {$/", "language": "JavaScript", "kind": "method", "signature": "(event, ...args)", "scope": "installEthereumMock.ethMock", "scopeKind": "class"}, {"_type": "tag", "name": "ethMock", "path": "/home/kavia/workspace/code-generation/clash-royale-ethereum-matchmaker-171107-171116/frontend/src/__tests__/test_integration_flows.spec.jsx", "pattern": "/^  const ethMock = {$/", "language": "JavaScript", "kind": "class", "scope": "installEthereumMock", "scopeKind": "class"}, {"_type": "tag", "name": "installEthereumMock", "path": "/home/kavia/workspace/code-generation/clash-royale-ethereum-matchmaker-171107-171116/frontend/src/__tests__/test_integration_flows.spec.jsx", "pattern": "/^function installEthereumMock({ accounts = [ethers.utils.getAddress('0x1234567890abcdef1234567890/", "language": "JavaScript", "kind": "function", "signature": "({ accounts = [ethers.utils.getAddress('0x1234567890abcdef1234567890abcdef12345678')], chainId = '0x1' } = {})"}, {"_type": "tag", "name": "mockFetchProfilesOnce", "path": "/home/kavia/workspace/code-generation/clash-royale-ethereum-matchmaker-171107-171116/frontend/src/__tests__/test_integration_flows.spec.jsx", "pattern": "/^function mockFetchProfilesOnce({ profiles, status = 200 }) {$/", "language": "JavaScript", "kind": "function", "signature": "({ profiles, status = 200 })"}, {"_type": "tag", "name": "ok", "path": "/home/kavia/workspace/code-generation/clash-royale-ethereum-matchmaker-171107-171116/frontend/src/__tests__/test_integration_flows.spec.jsx", "pattern": "/^  const response = { ok: status >= 200 && status < 300, status, json, text };$/", "language": "JavaScript", "kind": "property", "scope": "mockFetchProfilesOnce.response", "scopeKind": "class"}, {"_type": "tag", "name": "on", "path": "/home/kavia/workspace/code-generation/clash-royale-ethereum-matchmaker-171107-171116/frontend/src/__tests__/test_integration_flows.spec.jsx", "pattern": "/^    on: jest.fn((event, cb) => {$/", "language": "JavaScript", "kind": "property", "scope": "installEthereumMock.ethMock", "scopeKind": "class"}, {"_type": "tag", "name": "removeListener", "path": "/home/kavia/workspace/code-generation/clash-royale-ethereum-matchmaker-171107-171116/frontend/src/__tests__/test_integration_flows.spec.jsx", "pattern": "/^    removeListener: jest.fn((event, cb) => {$/", "language": "JavaScript", "kind": "property", "scope": "installEthereumMock.ethMock", "scopeKind": "class"}, {"_type": "tag", "name": "request", "path": "/home/kavia/workspace/code-generation/clash-royale-ethereum-matchmaker-171107-171116/frontend/src/__tests__/test_integration_flows.spec.jsx", "pattern": "/^    request: jest.fn(async ({ method }) => {$/", "language": "JavaScript", "kind": "property", "scope": "installEthereumMock.ethMock", "scopeKind": "class"}, {"_type": "tag", "name": "response", "path": "/home/kavia/workspace/code-generation/clash-royale-ethereum-matchmaker-171107-171116/frontend/src/__tests__/test_integration_flows.spec.jsx", "pattern": "/^  const response = { ok: status >= 200 && status < 300, status, json, text };$/", "language": "JavaScript", "kind": "class", "scope": "mockFetchProfilesOnce", "scopeKind": "class"}, {"_type": "tag", "name": "status", "path": "/home/kavia/workspace/code-generation/clash-royale-ethereum-matchmaker-171107-171116/frontend/src/__tests__/test_integration_flows.spec.jsx", "pattern": "/^  const response = { ok: status >= 200 && status < 300, status, json, text };$/", "language": "JavaScript", "kind": "field", "scope": "mockFetchProfilesOnce.response", "scopeKind": "class"}], "hash": "56489b31a1048e61c02174d1c72b8289", "format-version": 4, "code-base-name": "frontend", "filename": "frontend/src/__tests__/test_integration_flows.spec.jsx", "fields": [{"name": "const response = { ok: status >= 200 && status < 300, status, json, text };", "scope": "mockFetchProfilesOnce.response", "scopeKind": "class", "description": "unavailable"}, {"name": "on: jest.fn((event, cb) => {", "scope": "installEthereumMock.ethMock", "scopeKind": "class", "description": "unavailable"}, {"name": "removeListener: jest.fn((event, cb) => {", "scope": "installEthereumMock.ethMock", "scopeKind": "class", "description": "unavailable"}, {"name": "request: jest.fn(async ({ method }) => {", "scope": "installEthereumMock.ethMock", "scopeKind": "class", "description": "unavailable"}]}