{"is_source_file": true, "format": "JSX (JavaScript with React testing library and Jest)", "description": "This file contains high-level integration tests for a React application, specifically testing user profile listing, Ethereum wallet connection, and related workflows. It mocks network fetch requests and Ethereum provider interactions to simulate and verify different user flows and component behaviors.", "external_files": ["../App"], "external_methods": ["render", "screen", "waitFor", "within", "userEvent"], "published": ["describe", "test", "afterEach", "expect"], "classes": [], "methods": [{"name": "mockFetchProfilesOnce({ profiles, status = 200 })", "description": "Creates a mock fetch response for '/profiles' endpoint with specified profiles data and status.", "scope": "", "scopeKind": ""}, {"name": "installEthereumMock({ accounts = ['0xA0b86991c6218b36c1d19D4a2E9Eb0cE3606eB48'], chainId = '0x1' } = {})", "description": "Sets up a mock for window.ethereum with specified accounts and chainId, including event listeners.", "scope": "", "scopeKind": ""}, {"name": "__emit(event, ...args)", "scope": "installEthereumMock.ethMock", "scopeKind": "class", "description": "unavailable"}], "calls": ["jest.fn", "Promise.resolve", "global.fetch", "render", "screen.getByLabelText", "within(grid).getAllByRole", "expect", "userEvent.click", "waitFor", "screen.getByText", "screen.findByRole", "screen.getByTestId"], "search-terms": ["test_integration_flows.spec.jsx", "React Testing Library", "Ethereum provider mock", "jest.fn", "mockFetchProfilesOnce", "installEthereumMock", "Wallet connect", "mocked API", "integration tests", "Ethereum wallet connection"], "state": 2, "file_id": 13, "knowledge_revision": 73, "git_revision": "c7f8ead161da6db7ecc89b2155f91844c0571569", "revision_history": [{"28": ""}, {"73": "c7f8ead161da6db7ecc89b2155f91844c0571569"}], "ctags": [{"_type": "tag", "name": "__emit", "path": "/home/kavia/workspace/code-generation/clash-royale-ethereum-matchmaker-171107-171116/frontend/src/__tests__/test_integration_flows.spec.jsx", "pattern": "/^    __emit(event, ...args) {$/", "language": "JavaScript", "kind": "method", "signature": "(event, ...args)", "scope": "installEthereumMock.ethMock", "scopeKind": "class"}, {"_type": "tag", "name": "ethMock", "path": "/home/kavia/workspace/code-generation/clash-royale-ethereum-matchmaker-171107-171116/frontend/src/__tests__/test_integration_flows.spec.jsx", "pattern": "/^  const ethMock = {$/", "language": "JavaScript", "kind": "class", "scope": "installEthereumMock", "scopeKind": "class"}, {"_type": "tag", "name": "installEthereumMock", "path": "/home/kavia/workspace/code-generation/clash-royale-ethereum-matchmaker-171107-171116/frontend/src/__tests__/test_integration_flows.spec.jsx", "pattern": "/^function installEthereumMock({ accounts = ['0xA0b86991c6218b36c1d19D4a2E9Eb0cE3606eB48'], chainI/", "language": "JavaScript", "kind": "function", "signature": "({ accounts = ['0xA0b86991c6218b36c1d19D4a2E9Eb0cE3606eB48'], chainId = '0x1' } = {})"}, {"_type": "tag", "name": "mockFetchProfilesOnce", "path": "/home/kavia/workspace/code-generation/clash-royale-ethereum-matchmaker-171107-171116/frontend/src/__tests__/test_integration_flows.spec.jsx", "pattern": "/^function mockFetchProfilesOnce({ profiles, status = 200 }) {$/", "language": "JavaScript", "kind": "function", "signature": "({ profiles, status = 200 })"}, {"_type": "tag", "name": "ok", "path": "/home/kavia/workspace/code-generation/clash-royale-ethereum-matchmaker-171107-171116/frontend/src/__tests__/test_integration_flows.spec.jsx", "pattern": "/^  const response = { ok: status >= 200 && status < 300, status, json, text };$/", "language": "JavaScript", "kind": "property", "scope": "mockFetchProfilesOnce.response", "scopeKind": "class"}, {"_type": "tag", "name": "on", "path": "/home/kavia/workspace/code-generation/clash-royale-ethereum-matchmaker-171107-171116/frontend/src/__tests__/test_integration_flows.spec.jsx", "pattern": "/^    on: jest.fn((event, cb) => {$/", "language": "JavaScript", "kind": "property", "scope": "installEthereumMock.ethMock", "scopeKind": "class"}, {"_type": "tag", "name": "removeListener", "path": "/home/kavia/workspace/code-generation/clash-royale-ethereum-matchmaker-171107-171116/frontend/src/__tests__/test_integration_flows.spec.jsx", "pattern": "/^    removeListener: jest.fn((event, cb) => {$/", "language": "JavaScript", "kind": "property", "scope": "installEthereumMock.ethMock", "scopeKind": "class"}, {"_type": "tag", "name": "request", "path": "/home/kavia/workspace/code-generation/clash-royale-ethereum-matchmaker-171107-171116/frontend/src/__tests__/test_integration_flows.spec.jsx", "pattern": "/^    request: jest.fn(async ({ method }) => {$/", "language": "JavaScript", "kind": "property", "scope": "installEthereumMock.ethMock", "scopeKind": "class"}, {"_type": "tag", "name": "response", "path": "/home/kavia/workspace/code-generation/clash-royale-ethereum-matchmaker-171107-171116/frontend/src/__tests__/test_integration_flows.spec.jsx", "pattern": "/^  const response = { ok: status >= 200 && status < 300, status, json, text };$/", "language": "JavaScript", "kind": "class", "scope": "mockFetchProfilesOnce", "scopeKind": "class"}, {"_type": "tag", "name": "status", "path": "/home/kavia/workspace/code-generation/clash-royale-ethereum-matchmaker-171107-171116/frontend/src/__tests__/test_integration_flows.spec.jsx", "pattern": "/^  const response = { ok: status >= 200 && status < 300, status, json, text };$/", "language": "JavaScript", "kind": "field", "scope": "mockFetchProfilesOnce.response", "scopeKind": "class"}], "hash": "e1a3cb5f1fdd51f03a824b3986ed9d25", "format-version": 4, "code-base-name": "frontend", "filename": "frontend/src/__tests__/test_integration_flows.spec.jsx", "fields": [{"name": "const response = { ok: status >= 200 && status < 300, status, json, text };", "scope": "mockFetchProfilesOnce.response", "scopeKind": "class", "description": "unavailable"}, {"name": "on: jest.fn((event, cb) => {", "scope": "installEthereumMock.ethMock", "scopeKind": "class", "description": "unavailable"}, {"name": "removeListener: jest.fn((event, cb) => {", "scope": "installEthereumMock.ethMock", "scopeKind": "class", "description": "unavailable"}, {"name": "request: jest.fn(async ({ method }) => {", "scope": "installEthereumMock.ethMock", "scopeKind": "class", "description": "unavailable"}]}