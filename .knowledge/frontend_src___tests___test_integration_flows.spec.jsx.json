{"is_source_file": true, "format": "JavaScript with JSX (Specifically JSX in a .jsx file, used for React testing with Jest and Testing Library)", "description": "This file contains high-level integration tests for user flows in a React web application, especially focused on profile listing, wallet connection, and Ethereum provider interactions. It mocks network calls, Ethereum provider behaviors, and simulates user interaction to verify UI components behave correctly under various scenarios.", "external_files": ["../App"], "external_methods": ["jest.setTimeout", "jest.fn", "afterEach", "render", "screen.getByLabelText", "within", "screen.getByRole", "screen.getByText", "waitFor", "userEvent.click"], "published": ["mockFetchProfilesOnce", "installEthereumMock"], "classes": [], "methods": [{"name": "mockFetchProfilesOnce({ profiles, status = 200 })", "description": "Helper function to mock fetch responses for /profiles endpoint with specified profiles data and status.", "scope": "", "scopeKind": ""}, {"name": "installEthereumMock({ accounts = [ethers.utils.getAddress('0x1234567890abcdef1234567890abcdef12345678')], chainId = '0x1' } = {})", "description": "Creates a mock window.ethereum object with request, on, removeListener methods, simulating a wallet provider, with default accounts and chainId.", "scope": "", "scopeKind": ""}, {"name": "__emit(event, ...args)", "scope": "installEthereumMock.ethMock", "scopeKind": "class", "description": "unavailable"}], "calls": ["jest.setTimeout", "jest.fn", "global.fetch", "ethers.utils.getAddress", "render", "waitFor", "screen.getByLabelText", "within", "screen.getAllByRole", "screen.getByText", "userEvent.click", "expect", "installEthereumMock"], "search-terms": ["react testing-library", "Ethereum provider mock", "wallet connection test", "mock fetch API", "integration tests", "profile list rendering", "user interaction", "jest mock functions", "test suite"], "state": 2, "file_id": 13, "knowledge_revision": 83, "git_revision": "0176940c17fd1618e08828f4fff36585d8dbf198", "revision_history": [{"28": ""}, {"73": "c7f8ead161da6db7ecc89b2155f91844c0571569"}, {"74": "5a7ff2a5f327ec399646a4f506e23d532cb4f6ad"}, {"75": "5a7ff2a5f327ec399646a4f506e23d532cb4f6ad"}, {"76": "5a7ff2a5f327ec399646a4f506e23d532cb4f6ad"}, {"77": "8571ca82cc8013a4f1870c11525c1f8a2773d9a2"}, {"78": "11b17ffbceddf459723483da8da824f6215d3bad"}, {"79": "617f2d0a25b737115be3a1b1dbff634b3367cdbf"}, {"83": "0176940c17fd1618e08828f4fff36585d8dbf198"}], "ctags": [{"_type": "tag", "name": "__emit", "path": "/home/kavia/workspace/code-generation/clash-royale-ethereum-matchmaker-171107-171116/frontend/src/__tests__/test_integration_flows.spec.jsx", "pattern": "/^    __emit(event, ...args) {$/", "language": "JavaScript", "kind": "method", "signature": "(event, ...args)", "scope": "installEthereumMock.ethMock", "scopeKind": "class"}, {"_type": "tag", "name": "ethMock", "path": "/home/kavia/workspace/code-generation/clash-royale-ethereum-matchmaker-171107-171116/frontend/src/__tests__/test_integration_flows.spec.jsx", "pattern": "/^  const ethMock = {$/", "language": "JavaScript", "kind": "class", "scope": "installEthereumMock", "scopeKind": "class"}, {"_type": "tag", "name": "installEthereumMock", "path": "/home/kavia/workspace/code-generation/clash-royale-ethereum-matchmaker-171107-171116/frontend/src/__tests__/test_integration_flows.spec.jsx", "pattern": "/^function installEthereumMock({ accounts = [ethers.utils.getAddress('0x1234567890abcdef1234567890/", "language": "JavaScript", "kind": "function", "signature": "({ accounts = [ethers.utils.getAddress('0x1234567890abcdef1234567890abcdef12345678')], chainId = '0x1' } = {})"}, {"_type": "tag", "name": "mockFetchProfilesOnce", "path": "/home/kavia/workspace/code-generation/clash-royale-ethereum-matchmaker-171107-171116/frontend/src/__tests__/test_integration_flows.spec.jsx", "pattern": "/^function mockFetchProfilesOnce({ profiles, status = 200 }) {$/", "language": "JavaScript", "kind": "function", "signature": "({ profiles, status = 200 })"}, {"_type": "tag", "name": "ok", "path": "/home/kavia/workspace/code-generation/clash-royale-ethereum-matchmaker-171107-171116/frontend/src/__tests__/test_integration_flows.spec.jsx", "pattern": "/^  const response = { ok: status >= 200 && status < 300, status, json, text };$/", "language": "JavaScript", "kind": "property", "scope": "mockFetchProfilesOnce.response", "scopeKind": "class"}, {"_type": "tag", "name": "on", "path": "/home/kavia/workspace/code-generation/clash-royale-ethereum-matchmaker-171107-171116/frontend/src/__tests__/test_integration_flows.spec.jsx", "pattern": "/^    on: jest.fn((event, cb) => {$/", "language": "JavaScript", "kind": "property", "scope": "installEthereumMock.ethMock", "scopeKind": "class"}, {"_type": "tag", "name": "removeListener", "path": "/home/kavia/workspace/code-generation/clash-royale-ethereum-matchmaker-171107-171116/frontend/src/__tests__/test_integration_flows.spec.jsx", "pattern": "/^    removeListener: jest.fn((event, cb) => {$/", "language": "JavaScript", "kind": "property", "scope": "installEthereumMock.ethMock", "scopeKind": "class"}, {"_type": "tag", "name": "request", "path": "/home/kavia/workspace/code-generation/clash-royale-ethereum-matchmaker-171107-171116/frontend/src/__tests__/test_integration_flows.spec.jsx", "pattern": "/^    request: jest.fn(async ({ method }) => {$/", "language": "JavaScript", "kind": "property", "scope": "installEthereumMock.ethMock", "scopeKind": "class"}, {"_type": "tag", "name": "response", "path": "/home/kavia/workspace/code-generation/clash-royale-ethereum-matchmaker-171107-171116/frontend/src/__tests__/test_integration_flows.spec.jsx", "pattern": "/^  const response = { ok: status >= 200 && status < 300, status, json, text };$/", "language": "JavaScript", "kind": "class", "scope": "mockFetchProfilesOnce", "scopeKind": "class"}, {"_type": "tag", "name": "status", "path": "/home/kavia/workspace/code-generation/clash-royale-ethereum-matchmaker-171107-171116/frontend/src/__tests__/test_integration_flows.spec.jsx", "pattern": "/^  const response = { ok: status >= 200 && status < 300, status, json, text };$/", "language": "JavaScript", "kind": "field", "scope": "mockFetchProfilesOnce.response", "scopeKind": "class"}], "hash": "2a1ea51b829126c3da762897a4e1b5e9", "format-version": 4, "code-base-name": "frontend", "filename": "frontend/src/__tests__/test_integration_flows.spec.jsx", "fields": [{"name": "const response = { ok: status >= 200 && status < 300, status, json, text };", "scope": "mockFetchProfilesOnce.response", "scopeKind": "class", "description": "unavailable"}, {"name": "on: jest.fn((event, cb) => {", "scope": "installEthereumMock.ethMock", "scopeKind": "class", "description": "unavailable"}, {"name": "removeListener: jest.fn((event, cb) => {", "scope": "installEthereumMock.ethMock", "scopeKind": "class", "description": "unavailable"}, {"name": "request: jest.fn(async ({ method }) => {", "scope": "installEthereumMock.ethMock", "scopeKind": "class", "description": "unavailable"}]}